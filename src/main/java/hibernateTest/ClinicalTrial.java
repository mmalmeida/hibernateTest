package hibernateTest;


import java.util.SortedSet;
import java.util.TreeSet;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Sort;
import org.hibernate.annotations.SortType;
import org.hibernate.envers.Audited;

/**
 * ClinicalTrial generated by hbm2java
 */
@Entity
@Table(name = "clinical_trial", schema = "clinical")
@Audited
public class ClinicalTrial implements java.io.Serializable {

	@Id
	@Column(name = "id", unique = true, nullable = false)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "PK_TRIAL")
	private int id;
	
	private String name;
	private String code;
	private String eudract;

	@ManyToMany(targetEntity=Location.class)
	@JoinTable(schema="clinical")
	@Sort(type = SortType.COMPARATOR,comparator=StringNumberComparator.class)
	private SortedSet<Location> locations = new TreeSet<Location>(new StringNumberComparator());
	
	public ClinicalTrial() {
	}
	
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getCode() {
		return code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	public String getEudract() {
		return eudract;
	}

	public void setEudract(String eudract) {
		this.eudract = eudract;
	}

	public SortedSet<Location> getLocations() {
		return locations;
	}

	public void setLocations(SortedSet<Location> locations) {
		this.locations = locations;
	}
	
	@Override
	public String toString() {
		if(getCode() == null) {
			return "";
		}
		return getCode();
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getCode() == null) ? 0 : getCode().hashCode());
		result = prime * result + ((getEudract() == null) ? 0 : getEudract().hashCode());
		result = prime * result + ((getName() == null) ? 0 : getName().hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if ( !(obj instanceof ClinicalTrial) ) return false;
		
		ClinicalTrial other = (ClinicalTrial) obj;
		if (getCode() == null) {
			if (other.getCode() != null)
				return false;
		} else if (!getCode().equals(other.getCode()))
			return false;
		if (getEudract() == null) {
			if (other.getEudract() != null)
				return false;
		} else if (!getEudract().equals(other.getEudract()))
			return false;
		if (getName() == null) {
			if (other.getName() != null)
				return false;
		} else if (!getName().equals(other.getName()))
			return false;
		return true;
	}

}
